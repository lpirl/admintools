#!/bin/sh
''':'
exec python3 -OO "$0" "$@"
'''
# The above is a little hack to use arguments in the shebang.

__doc__ = '''\
This script is intended to anonymize log files.

Currently, IPv4, IPv6 and email addresses are considered.
False positives are more tolerable than false negatives.
Effectiveness over efficiency.

If you want to anonymize your logs with logrotate, you can place the
following lines in, e.g.,
``/etc/logrotate.d/000-anonymize-before-compression``:
``compress``,
``compresscmd /bin/sh``,
``compressoptions -c '/where/ever/anonymize-log | gzip'``.

This can, e.g., be useful to fulfill the General Data Protection
Regulation (GDPR, German: DSGVO).

The implementation to anonymize the rightmost bits of IP addresses has
been taken from https://www.privacyfoundation.ch/de/service/anonip.html
mainly. Big thanks.
'''



import argparse

from logging import getLogger, DEBUG, INFO, debug, info, error
from abc import ABCMeta, abstractmethod
from sys import stdin, stdout
from re import compile as compile_re, IGNORECASE
from tempfile import mkstemp
from shutil import copy
from os import remove, fdopen
from socket import inet_pton, inet_ntop, AF_INET, AF_INET6
from ipaddress import IPv4Address, IPv6Address

class Cleaner(object):
  '''
  A sort of a job queue that holds jobs which should be run (in order)
  before the program exits.
  '''

  def __init__(self):
    ''' initializes instance variables '''
    self._jobs = []

  def add_job(self, func, *args, **kwargs):
    ''' add a job to the queue '''
    self._jobs.append((func, args, kwargs))

  def do_all_jobs(self):
    ''' do (and remove) all the jobs in (from) the queue '''
    while self._jobs:
      self.do_one_job()

  def do_one_job(self):
    ''' do and remove one job from the queue '''
    # in reverse order:
    func, args, kwargs = self._jobs.pop()
    debug("cleanup: func=%s.%s, args=%r, kwargs=%r", func.__module__,
          func.__name__, args, kwargs)
    func(*args, **kwargs)



class AnonymizerRegistry(object, metaclass=ABCMeta):
  '''
  Concrete subclasses of ``AnonymizerBase`` register at this class.
  '''
  items = set()
  register = items.add



class AnonymizerBase(object, metaclass=ABCMeta):
  '''
  A common base class for all anonymizers.

  An anonymizer anonymizes specific aspects in strings, e.g.,
  email addresses.
  Usually, it is being fed with the lines of a log file, one by one,
  and returns the respective anonymized line.
  '''

  def __init__(self, _):
    '''
    called initially, mainly to enable the addition of CLI arguments
    '''
    super().__init__()

  def setup(self, parsed_args):
    ''' called once prior checks (i.e. calls to ``anonymize``) '''
    pass

  @abstractmethod
  def anonymize(self, line):
    '''
    returns anonymized ``line``

    A general note on regular expressions: measurements (cPython 3)
    showed that it is generally cheaper to match with non-capturing
    regular expressions although the matches have to be processed another
    time afterwards. (Likely because the matching is way more often
    performed than anonymization.)
    '''
    pass

  def __repr__(self):
    """ returns human readable name for an anonymizer """
    return '%s %s' % (self.__class__.__name__, hex(id(self)))

@AnonymizerRegistry.register
class Ipv4Anonymizer(AnonymizerBase):
  '''
  Anonymizes IPv4 addresses by zeroing the rightmost bits.

  Kudos to https://www.privacyfoundation.ch/de/service/anonip.html,
  where we took the implementation to zero the rightmost bits from.
  '''

  @staticmethod
  def ipv4_address_to_int(ipv4_address):
    '''
    Takes an ``ipv4_address`` as string and returns the corresponding
    integer.
    '''
    try:
      pton = inet_pton(AF_INET, ipv4_address)
    except OSError:
      error('Could not unpack a string, which we identified as IPv4 '
            'address. The operating system says it\'s invalid: %s '
            '– falling back to 0.0.0.0', ipv4_address)
      pton = inet_pton(AF_INET, '0.0.0.0')

    return int.from_bytes(pton, byteorder='big')

  @staticmethod
  def int_to_ipv4_address(integer):
    '''
    Takes an ``integer`` and returns the corresponding IPv4 address.
    '''
    ntop = integer.to_bytes(length=4, byteorder='big')
    return inet_ntop(AF_INET, ntop)

  # ``__func__`` required to bypass ``@staticmethod`` decorator,
  # so we can use this function for class variables already.
  # Benchmarks over 500 executions show, that unpacking the full mask
  # 'dynamically' here does not slow down the execution of script
  # (Python maybe compiles it statically into the bytecode/pycache).
  FULL_MASK = ipv4_address_to_int.__func__('255.255.255.255')

  # thanks to https://stackoverflow.com/a/106223 (adapted)
  REGEXP = (
    r'(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.'
    r'(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.'
    r'(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])\.'
    r'(?:25[0-5]|2[0-4][0-9]|1[0-9]{2}|[1-9][0-9]|[0-9])'
  )

  def __init__(self, argparser):
    ''' see base class' documentation on ``__init__`` '''
    super().__init__(argparser)
    argparser.add_argument('--ipv4mask', metavar='N', default=8,
                           help=('zero rightmost N bits of '
                                 'IPv4 addresses, 1 <= N <= 32'),
                           choices=range(1, 33))
    argparser.add_argument('--private-ipv4', '-p', action='store_true',
                           default=False, help=('zero private IPv4 '
                                                'addresses too'))
    self.mask = None

  def setup(self, parsed_args):
    ''' see base class' documentation on ``setup`` '''

    self.pattern = compile_re(self.__class__.REGEXP)
    self.replace_private_ipv4 = parsed_args.private_ipv4

    debug("%s will truncate %d rightmost bits%s",
          self.__class__.__name__,
          parsed_args.ipv4mask,
          ' including private IPv4 ranges' if parsed_args.private_ipv4 else ''
    )
    self.mask = self.FULL_MASK << parsed_args.ipv4mask

  def anonymize(self, line):
    ''' returns anonymized ``line`` '''

    for match in self.pattern.finditer(line):
      matched_string = match.group(0)
      if not self.replace_private_ipv4 and \
         IPv4Address(matched_string).is_private:
        return line
      address_int = self.ipv4_address_to_int(matched_string)
      masked_address_int = address_int & self.mask
      masked_address_str = self.int_to_ipv4_address(masked_address_int)
      line = line.replace(matched_string, masked_address_str, 1)

    return line



@AnonymizerRegistry.register
class Ipv6Anonymizer(AnonymizerBase):
  '''
  Anonymizes IPv6 addresses by zeroing the rightmost bits.

  Kudos to https://www.privacyfoundation.ch/de/service/anonip.html,
  where we took the implementation to zero the rightmost bits from.
  '''

  @staticmethod
  def ipv6_address_to_int(ipv6_address):
    '''
    Takes an ``ipv6_address`` as string and returns the corresponding
    integer.
    '''

    # remove the zone index since ``inet_pton`` won't accept it
    ipv6_address = ipv6_address.rsplit('%', maxsplit=1)[0]

    try:
      pton = inet_pton(AF_INET6, ipv6_address)
    except OSError:
      error('Could not unpack a string, which we identified as IPv6 '
            'address. The operating system says it\'s invalid: %s '
            '– falling back to ::', ipv6_address)
      pton = inet_pton(AF_INET6, '::')

    return int.from_bytes(pton, byteorder='big')

  @staticmethod
  def int_to_ipv6_address(integer):
    '''
    Takes an ``integer`` and returns the corresponding IPv6 address.
    '''
    ntop = integer.to_bytes(length=16, byteorder='big')
    return inet_ntop(AF_INET6, ntop)

  # see comment over at ``Ipv4Anonymizer.FULL_MASK``
  FULL_MASK = ipv6_address_to_int.__func__(
    'ffff:ffff:ffff:ffff:ffff:ffff:ffff:ffff'
  )

  # thanks to https://gist.github.com/dfee/6ed3a4b05cfe7a6faf40a2102408d5d8
  REGEXP = r'(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,4}:[^\s:](?:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])))|(?:::(?:ffff(?::0{1,4}){0,1}:){0,1}[^\s:](?:(?:(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])\.){3,3}(?:25[0-5]|(?:2[0-4]|1{0,1}[0-9]){0,1}[0-9])))|(?:fe80:(?::(?:(?:[0-9a-fA-F]){1,4})){0,4}%[0-9a-zA-Z]{1,})|(?::(?:(?::(?:(?:[0-9a-fA-F]){1,4})){1,7}|:))|(?:(?:(?:[0-9a-fA-F]){1,4}):(?:(?::(?:(?:[0-9a-fA-F]){1,4})){1,6}))|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,2}(?::(?:(?:[0-9a-fA-F]){1,4})){1,5})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,3}(?::(?:(?:[0-9a-fA-F]){1,4})){1,4})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,4}(?::(?:(?:[0-9a-fA-F]){1,4})){1,3})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,5}(?::(?:(?:[0-9a-fA-F]){1,4})){1,2})|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,6}:(?:(?:[0-9a-fA-F]){1,4}))|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){1,7}:)|(?:(?:(?:(?:[0-9a-fA-F]){1,4}):){7,7}(?:(?:[0-9a-fA-F]){1,4}))'

  def __init__(self, argparser):
    ''' see base class' documentation on ``__init__`` '''
    super().__init__(argparser)
    argparser.add_argument('--ipv6mask', metavar='N', default=64,
                           help=('zero rightmost N bits of '
                                 'IPv6 addresses, 1 <= N <= 128'),
                           choices=range(1, 129))
    argparser.add_argument('--private-ipv6', '-P', action='store_true',
                           default=False, help=('zero private IPv6 '
                                                'addresses too'))
    self.mask = None

  def setup(self, parsed_args):
    ''' see base class' documentation on ``setup`` '''

    self.pattern = compile_re(self.__class__.REGEXP, IGNORECASE)
    self.replace_private_ipv6 = parsed_args.private_ipv6

    debug("%s will truncate %d rightmost bits",
          self.__class__.__name__, parsed_args.ipv6mask)
    self.mask = self.FULL_MASK << parsed_args.ipv6mask

  def anonymize(self, line):
    ''' see base class' documentation on ``anonymize`` '''

    for match in self.pattern.finditer(line):
      matched_string = match.group(0)
      if not self.replace_private_ipv6 and \
         IPv6Address(matched_string).is_private:
        return line
      address_int = self.ipv6_address_to_int(matched_string)
      masked_address_int = address_int & self.mask
      masked_address_str = self.int_to_ipv6_address(masked_address_int)
      line = line.replace(matched_string, masked_address_str, 1)

    return line



@AnonymizerRegistry.register
class EmailAnonymizer(AnonymizerBase):
  '''
  anonymizes email addresses by replacing at least 50% of the characters
  in the local part and in the domain part
  '''

  # thanks to https://stackoverflow.com/a/201378
  REGEXP = r'(?:[a-z0-9!#$%&\'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&\'*+/=?^_`{|}~-]+)*|\"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*\")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9]))\.){3}(?:(?:2(?:5[0-5]|[0-4][0-9])|1[0-9][0-9]|[1-9]?[0-9])|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])'

  @staticmethod
  def anonymize_string(string, max_ratio_to_keep=.5, keep_right=False):
    '''
    Anonymizes ``string`` by keeping ``max_ratio_to_keep`` characters
    and replacing the rest with '...'.
    By default, characters are removed from the end of the string
    (right), if ``keep_right`` evaluates to true, characters are removed
    from the beginning of ``string``.

    Returns the anonymized string.
    '''
    char_count = len(string)
    char_count_to_keep = int(char_count * max_ratio_to_keep)
    if keep_right:
      return '...' + string[-char_count_to_keep:]
    return string[:char_count_to_keep] + '...'

  def setup(self, parsed_args):
    ''' see base class' documentation on ``setup`` '''

    self.pattern = compile_re(self.__class__.REGEXP, IGNORECASE)

  def anonymize(self, line):
    ''' see base class' documentation on ``anonymize`` '''

    for match in self.pattern.finditer(line):
      matched_string = match.group(0)
      local_part, domain_part = matched_string.rsplit('@', 1)
      local_part = self.anonymize_string(local_part)
      domain_part = self.anonymize_string(domain_part, keep_right=True)
      replace_string = '%s@%s' % (local_part, domain_part)
      line = line.replace(matched_string, replace_string, 1)

    return line



def anonymize_lines(in_file, out_file, anonymizers):
  '''
  processes all lines with ``anonymizers``,
  reads from ``in_file``, writes to ``out_file``
  '''

  info('processing lines')
  for line in in_file:
    try:
      decoded_line = line.decode()
    except UnicodeDecodeError:
      debug('could not decode byte from input; '
            'assuming input is binary; '
            'passing through rest of input')
      out_file.write(line)
      for pass_through_line in in_file:
        out_file.write(pass_through_line)
      break
    else:
      for anonymizer in anonymizers:
        decoded_line = anonymizer.anonymize(decoded_line)
      out_file.write(decoded_line.encode())



def get_in_file(args, cleaner):
  ''' returns the input file according to ``args`` '''

  debug('open input file "%s"', args.in_file)
  if args.in_file == '-':
    in_file = fdopen(stdin.fileno(), 'rb')
  else:
    in_file = open(args.in_file, 'rb')

  cleaner.add_job(in_file.close)
  return in_file



def get_out_file(args, cleaner):
  ''' returns the output file according to ``args`` '''

  if args.inplace:
    debug('create temporary file for in-place mode')
    out_file, args.out_file = mkstemp()
    cleaner.add_job(remove, args.out_file)

  debug('open output file "%s"' % args.out_file)

  if args.out_file == '-':
    out_file = fdopen(stdout.fileno(), 'wb')
  else:
    out_file = open(args.out_file, 'wb')

  cleaner.add_job(out_file.close)
  return out_file

def caught_main(cleaner):
  '''
  Actual main procedure.

  Uncaught exceptions will be handled in calling procedure.
  '''

  parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )

  all_anonymizer_class_names = tuple(
    c.__name__ for c in AnonymizerRegistry.items
  )

  parser.add_argument('-d', '--debug', action='store_true', default=False,
                      help='turn on debug messages')
  parser.add_argument('-v', '--verbose', action='store_true', default=False,
                      help='turn on verbose messages')
  parser.add_argument('--inplace', action='store_true', default=False,
                      help='replace input file (out_file will be ignored)')
  parser.add_argument('in_file', nargs='?', default='-',
                      help='file to read from, stdin: -')
  parser.add_argument('out_file', nargs='?', default='-',
                      help='file to write to, stdout: -')
  parser.add_argument('-a', '--anonymizers',
                      default=','.join(all_anonymizer_class_names),
                      help='comma separated list of anonymizers to enable')


  # initialize anonymizers
  anonymizers = set(anonymizer(parser)
                    for anonymizer in AnonymizerRegistry.items)
  args = parser.parse_args()

  # set up logger
  logger = getLogger()
  logger.name = ""
  if args.debug:
    logger.setLevel(DEBUG)
  if args.verbose:
    logger.setLevel(INFO)

  debug('checking if anonymizers requested actually exist')
  anonymizers_from_args = set(args.anonymizers.split(','))
  anonymizers_from_registry = set(a.__class__.__name__
                                  for a in anonymizers)
  unknown_anonymizers = anonymizers_from_args - anonymizers_from_registry
  if unknown_anonymizers:
    error('Anonymizers unknown: %s\nPick any of: %s',
          ', '.join(unknown_anonymizers),
          ', '.join(anonymizers_from_registry))
    exit(2)

  debug('removing anonymizers not requested to run')
  anonymizers = set(a for a in anonymizers
                    if a.__class__.__name__ in anonymizers_from_args)
  debug('anonymizers remaining: %s', ', '.join(str(a) for a in anonymizers))

  debug('setting up anonymizers')
  for anonymizer in anonymizers:
    debug('setting up %s', anonymizer)
    anonymizer.setup(args)

  in_file = get_in_file(args, cleaner)
  out_file = get_out_file(args, cleaner)

  debug('doing argument sanity checks')
  if args.inplace and in_file == stdin:
    error('Cannot modify stdin --inplace.')
    exit(1)

  anonymize_lines(in_file, out_file, anonymizers)

  cleaner.do_one_job() # closes out_file

  if args.inplace and in_file != stdin:
    assert out_file != stdout
    info('replacing input file')
    copy(out_file.name, in_file.name)

  info('all done')



def main():
  '''
  Wrapper around actual main procedure.

  Will hold back uncaught exceptions of the (actual) main procedure,
  will run clean up jobs, and will raise the held exception afterwards.
  '''

  cleaner = Cleaner()
  abnormal_termination = False
  try:
    caught_main(cleaner)
  except Exception as exception:
    error("abnormal termination (see error at end of output)")
    abnormal_termination = True
    raise exception
  finally:
    debug("running cleanup jobs")
    cleaner.do_all_jobs()

  if abnormal_termination:
    exit(1)
  else:
    debug("success - bye")



if __name__ == '__main__':
  main()
