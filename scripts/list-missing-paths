#!/bin/sh
''':'
exec python3 -OO "$0" "$@"
'''
# The above is a little hack to use arguments in the shebang.

__doc__ = """
This script finds absent paths which were present during the previous run.

This can be useful, e.g., for long-term/archive storage where
"suddenly missing" paths are suspicious and should be noticed.
Paths might be "suddenly missing" due to, e.g., erroneous usage of
command line tools or failures in the underlying infrastructure (e.g.,
file system, disk).

If this script is installed as a cron job and the operating system is
capable of sending emails, you'll receive email notifications.
"""

import sys
import argparse
from logging import (getLogger, ERROR, DEBUG, INFO, debug, info,
                     warning, error)
from os import walk
from os.path import join as path_join, abspath, ismount, isfile, basename
from json import JSONDecodeError, load, dump
from itertools import chain



def handle_walk_error(exception):
  """
  Handles ``OSError``s during ``os.walk``s, i.e., print the error
  message in verbose mode.

  Of course, this function might be used to handle ``OSErrors``
  occurring in other situations as well.
  """
  warning('Got "%s" when processing "%s"', exception.strerror,
          exception.filename)


def set_up_logger(be_quiet, be_verbose, print_debug):
  """
  configures the logger according to (Boolean) log levels specified
  """

  logger = getLogger()
  logger.name = ""

  if be_quiet and be_verbose:
    error(('conflicting options specified: '
           'cannot be quiet and verbose at the same time'))
    exit(1)
  if be_quiet and print_debug:
    error(('conflicting options specified: '
           'cannot be quiet and print debug messages at the same time'))
    exit(1)

  if be_quiet:
    logger.setLevel(ERROR)
  if be_verbose:
    logger.setLevel(INFO)
  if print_debug:
    logger.setLevel(DEBUG)



def get_paths(paths, no_xdev=False, use_relative_paths=False):
  """ returns a set of empty directories found in ``paths``"""

  debug('going to process directories: %s', paths)
  found_paths = set()

  for path in paths:

    if not use_relative_paths:
      path = abspath(path)

    for root, dir_names, file_names in walk(path, onerror=handle_walk_error):

      # we use ``chain`` so we don't need to create an intermediate
      # union set (``dir_names`` and ``file_names`` should have no
      # elements in common anyway)
      found_paths.update(path_join(root, name) for name in
                         chain(dir_names, file_names))

      # remove cross-device links, if requested
      if no_xdev:
        # we don't put this block in a comprehension so we can info-print

        # we iterate over a copy so we can modify the original
        for dir_name in dir_names[:]:

          dir_path = path_join(root, dir_name)

          if ismount(dir_path):
            info('not descending into mount point "%s"', dir_path)

            # this is O(n) and could be improved:
            dir_names.remove(dir_name)

  return found_paths



def load_paths(file_name):
  """
  loads paths from ``file_name`` and returns those as a set, or returns
  an empty set if something goes wrong
  """

  paths = set()

  if not isfile(file_name):
    warning('State file (%s) missing. ' % file_name +
            'Hence, we cannot list missing paths. '
            'However, the state file will be created at the end of this '
            'run and missing paths can be listed the next run.')
    return paths

  try:
    with open(file_name, 'r') as filep:
      paths = set(load(filep))
  except OSError as exception:
    warning('file seems to be unreadable (%s), cannot load paths',
            exception)
  except JSONDecodeError as exception:
    warning('file seems to be corrupt (%s), cannot load paths',
            exception)

  return paths



def print_missing_items(old, new):
  """ prints items which are in ``new`` but not in ``new``, sorted """
  for item in sorted(old - new):
    # ``os.walk`` might return surrogate characters which cannot be utf-8
    # encoded without further ado
    encoded = item.encode('utf-8', 'surrogateescape')
    try:
      print(encoded.decode('utf-8'))
    except UnicodeDecodeError:
      warning('cannot properly decode the following file name; '
              'undecodable characters backslash-escaped:')
      print(encoded.decode('utf-8', errors='backslashreplace'))



def store_paths(file_name, paths):
  """ stores ``paths`` in ``file_name`` """

  if not file_name:
    debug('no file specified, not storing paths')

  try:
    with open(file_name, 'w') as filep:
      dump(list(paths), filep)
  except Exception as exception:
    error('could not write file: %s', exception)
    exit(2)



def main():
  '''
  Actual main procedure.

  Uncaught exceptions will be handled in calling procedure (``main()``).
  '''

  parser = argparse.ArgumentParser(
    description=__doc__,
    formatter_class=argparse.ArgumentDefaultsHelpFormatter
  )

  parser.add_argument('-r', '--relative', action='store_true', default=False,
                      help='don\'t normalize to absolute paths')
  parser.add_argument('-x', '--no-xdev', action='store_true', default=False,
                      help='don\'t cross file system boundaries')
  parser.add_argument('-q', '--quiet', action='store_true', default=False,
                      help='turn off warning messages')
  parser.add_argument('-v', '--verbose', action='store_true', default=False,
                      help='turn on verbose messages')
  parser.add_argument('-d', '--debug', action='store_true', default=False,
                      help='turn on debug messages')
  parser.add_argument('state_file',
                      help=('file to store list of empty directories in; '
                            'causes output to contain only directory '
                            'which have not been empty during the '
                            'previous run'))
  parser.add_argument('paths', nargs='+',
                      help='path to search empty directories in')


  args = parser.parse_args()

  state_file = abspath(args.state_file)

  set_up_logger(args.quiet, args.verbose, args.debug)

  paths = get_paths(args.paths, args.no_xdev, args.relative)

  previous_paths = load_paths(state_file)

  print_missing_items(previous_paths, paths)

  store_paths(state_file, paths)



if __name__ == '__main__':
  main()
